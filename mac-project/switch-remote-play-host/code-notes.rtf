{\rtf1\ansi\ansicpg1252\cocoartf2577
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red108\green121\blue134;\red31\green31\blue36;\red255\green255\blue255;
}
{\*\expandedcolortbl;;\csgenericrgb\c42394\c47462\c52518;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c100000\c100000\c100000\c85000;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab692
\pard\tx692\pardeftab692\pardirnatural\partightenfactor0

\f0\fs28 \cf2 \cb3 //    TestProcess();\cf4 \
\cf2 //    auto command = "ffmpeg-arm";\cf4 \
\cf2 //    std::vector<std::string> args = \{"ffmpeg-arm", "-f", "avfoundation", "-i", "1",  "output.mkv"\};\cf4 \
\cf2 //    auto seconds = 8;\cf4 \
\cf2 //    auto process = Process\{command, args\};\cf4 \
\cf2 //    auto stopper = std::thread([&]\{\cf4 \
\cf2 //        std::this_thread::sleep_for(std::chrono::duration<int, std::milli>(seconds * 1000));\cf4 \
\cf2 //        if(!process.Stop())\cf4 \
\cf2 //            std::cout << "Failed to stop process\\n\\n";\cf4 \
\cf2 //    \});\cf4 \
\cf2 //    process.Wait();\cf4 \
\cf2 //    stopper.join();\cf4 \
\cf2 //    auto pid = StartProcess("ffmpeg-arm");\cf4 \
\cf2 //    int seconds = 10;\cf4 \
\cf2 //    auto processStopper = std::thread([=]\{\cf4 \
\cf2 //        std::this_thread::sleep_for(std::chrono::duration<int, std::milli>(seconds * 1000));\cf4 \
\cf2 //        kill(pid, SIGTERM);\cf4 \
\cf2 //    \});\cf4 \
\cf2 //    int exitStatus = 0;\cf4 \
\cf2 //    waitpid(pid, &exitStatus, 0);\cf4 \
\cf2 //    processStopper.join();\cf4 \
\cf2 //    return 0;}