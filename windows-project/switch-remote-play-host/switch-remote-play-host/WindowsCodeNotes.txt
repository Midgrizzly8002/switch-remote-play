
/*
    Required runtime software and drivers this program relies on:
    - Screen.Capturer.Recorder (using v0.12.11)
        + https://github.com/rdp/screen-capture-recorder-to-video-windows-free/releases/tag/v0.12.11 OR https://github.com/rdp/screen-capture-recorder-to-video-windows-free/releases/latest
    - ViGEmBus Driver (using v1.16.116)
        + https://github.com/ViGEm/ViGEmBus/releases/tag/setup-v1.16.116 OR https://github.com/ViGEm/ViGEmBus/releases/latest
    - ffmpeg.exe (using 2020-11-25-git-3de3d2f5e2-full_build)
        + https://www.gyan.dev/ffmpeg/builds/ OR https://ffmpeg.org/download.html#build-windows

    Library dependencies:
    - ViGEmClient SDK (using v1.16.28.0)
        + https://github.com/ViGEm/ViGEmClient/releases/tag/v1.16.28.0 OR https://github.com/ViGEm/ViGEmClient/releases/latest
*/

/*
    Getting monitor information from windows
*/
MONITORINFOEX DefaultMonitorInfo()
{
    auto monitorPoint = POINT{ 0 };
    monitorPoint.x = 0; monitorPoint.y = 0;
    auto handle = MonitorFromPoint(monitorPoint, MONITOR_DEFAULTTOPRIMARY);

    auto monitorInfo = MONITORINFOEX{};
    monitorInfo.cbSize = sizeof(monitorInfo);

    GetMonitorInfo(handle, &monitorInfo);

    return monitorInfo;
}

void PrintChangeDisplayStatus(long result)
{
    switch (result)
    {
    case DISP_CHANGE_SUCCESSFUL:
        std::cout << "The settings change was successful" << "\n";
        break;

    case DISP_CHANGE_BADDUALVIEW:
        std::cout << "The settings change was unsuccessful because the system is DualView capable" << "\n";
        break;

    case DISP_CHANGE_BADFLAGS:
        std::cout << "An invalid set of flags was passed in" << "\n";
        break;

    case DISP_CHANGE_BADMODE:
        std::cout << "The graphics mode is not supported" << "\n";
        break;

    case DISP_CHANGE_BADPARAM:
        std::cout << "An invalid parameter was passed in. This can include an invalid flag or combination of flags" << "\n";
        break;

    case DISP_CHANGE_FAILED:
        std::cout << "The display driver failed the specified graphics mode" << "\n";
        break;

    case DISP_CHANGE_NOTUPDATED:
        std::cout << "Unable to write settings to the registry" << "\n";
        break;

    case DISP_CHANGE_RESTART:
        std::cout << "The computer must be restarted for the graphics mode to work" << "\n";
        break;
    }
}

void TestMonitorInfo()
{
    auto monitorInfo = DefaultMonitorInfo();

    std::cout << "Monitor Info: " << "\n";
    if (monitorInfo.dwFlags == MONITORINFOF_PRIMARY)
        std::cout << "    Primary Monitor" << "\n";
    else
        std::cout << "    Secondary Monitor" << "\n";

    auto charRep = std::wstring{ monitorInfo.szDevice };
    auto str = std::string(charRep.begin(), charRep.end());
    std::cout << "    " << str << "\n";
    auto width = monitorInfo.rcMonitor.right - monitorInfo.rcMonitor.left;
    auto height = monitorInfo.rcMonitor.bottom - monitorInfo.rcMonitor.top;
    std::cout << "    " << width << " x " << height << "\n";
    auto workWidth = monitorInfo.rcWork.right - monitorInfo.rcWork.left;
    auto workHeight = monitorInfo.rcWork.bottom - monitorInfo.rcWork.top;
    std::cout << "    " << workWidth << " x " << workHeight << "\n";

    auto deviceMode = DEVMODE{ 0 };

    deviceMode.dmSize = sizeof(deviceMode);
    deviceMode.dmBitsPerPel = 32;
    deviceMode.dmPelsWidth = 1280;
    deviceMode.dmPelsHeight = 720;
    deviceMode.dmDisplayFrequency = 60;
    deviceMode.dmFields = DM_PELSWIDTH | DM_PELSHEIGHT;

    auto result = ChangeDisplaySettings(&deviceMode, CDS_FULLSCREEN);
    if (result == DISP_CHANGE_SUCCESSFUL)
    {
        std::this_thread::sleep_for(std::chrono::duration<int, std::milli>(5000));

        deviceMode.dmPelsWidth = width;
        deviceMode.dmPelsHeight = height;

        auto changeBackResult = ChangeDisplaySettings(&deviceMode, CDS_FULLSCREEN);
        PrintChangeDisplayStatus(changeBackResult);
    }
    else
    {
        PrintChangeDisplayStatus(result);
    }
}
