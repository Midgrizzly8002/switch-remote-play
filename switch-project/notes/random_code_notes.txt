stopping the application from sleeping and stopping it from exiting (for 15 seconds, then it times out)    
    
    // appletLockExit(); //don't let the applet force close till we cleanup (Will force close if cleanup takes longer than 15s)
    // auto request = appletRequestToAcquireSleepLock();
    // cout << "Sleep lock request: " << request << endl;
    // appletReleaseSleepLock();
    
    // appletUnlockExit(); //release lock on application

Hooking into applet states to get callbacks

    //callback function that can be given to the app to be called on state changes
    void AppStateHook(AppletHookType hook, void* param)
    {
        std::cout << "Hook Type: " << hook << std::endl;
        if(param != nullptr)
        {
            SDL_Color* col = (SDL_Color*)param;
            col->r = 150;
            col->g = 190;
            col->b = 100;
        }

        if(hook == AppletHookType_OnExitRequest)
            std::cout << "Hook into exit request" << std::endl;

        auto state = appletGetFocusState();
        std::cout << "App state: " << state << std::endl;

        if(hook == AppletHookType_OnFocusState)
        {
            auto state = appletGetFocusState();
            if(state == AppletFocusState_NotFocusedHomeSleep)
            {
                std::cout << "Sleeping now" << std::endl;
            }
        }
    }

    AppletHookCookie cookie;
    appletHook(&cookie, AppStateHook, (void*)&bgCol);

    AppletFocusState focusState = appletGetFocusState();
    cout << "Focus State Val: " << focusState << endl;
    focusState = appletGetFocusState();
    //suspend home sleep notify will notify the hook when the system changes focus.
    appletSetFocusHandlingMode(AppletFocusHandlingMode_SuspendHomeSleepNotify);
    cout << "Focus State after modification Val: " << focusState << endl;

    
    appletUnhook(&cookie);




Networking Broadcaster snippet

    bool LookForPC()
    {
        NetworkBroadcast broadcast;
        std::string pcIP = "";
        if(broadcast.FindConnectionIP("switch-0", pcIP))
        {
            std::cout << "Found PC IP: " << pcIP << std::endl;
            return true;
        }
        else
        {
            std::cout << "Failed to find PC IP." << std::endl;
            return false;
        }   
    }

Networking snippet

    #include <netdb.h>
    #include <arpa/inet.h>
    #include <netinet/in.h>
    #include <sys/errno.h>
    #include <unistd.h>
    #include <sys/types.h>
    #include <sys/socket.h>

    void speakToServer(std::string message)
    {
        sockaddr_in serverAddr;
        unsigned short portNo = 20001;
        serverAddr.sin_family = AF_INET;
        serverAddr.sin_port = htons(portNo);
        serverAddr.sin_addr.s_addr = inet_addr("192.168.0.19");

        auto clientSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_IP);
        if(clientSocket < 0)
            std::cout << "error occurred trying to create socket" << std::endl;

        auto result = connect(clientSocket, (const sockaddr*)&serverAddr, sizeof(serverAddr));
        if(result < 0)
            std::cout << "failed to connect to server" << std::endl;

        char msgBuffer[256];
        for(auto& c : msgBuffer)
            c = 0;
        
        result = recv(clientSocket, msgBuffer, 255, 0);
        if(result < 0)
            std::cout << "error receiving data from server" << std::endl;
        else
        {
            std::cout << "received " << result << " bytes. (msg: " << msgBuffer << ")" << std::endl;
        }
        std::string reply = "Thanks mate. I'm on the switch so no BSOD here, just atmos crash dumps.";
        result = send(clientSocket, reply.c_str(), reply.length(), 0);
        if(result < 0)
            std::cout << "failed to send reply" << std::endl;
        else
        {
            std::cout << "Sent " << reply.length() << " bytes." << std::endl;
        }
        
        close(clientSocket);
    }

Switch initialisations (crashing from pcv, need to revisit it later)

    //std::cout << "Calling pcvInitialize" << std::endl;
    //pcvInitialize();

    //std::cout << "calling romfsInit" << std::endl;
    //romfsInit();

ffmpeg / libav snippets and notes

    //string url = "rtp://0.0.0.0:2222"; //very fast data retrieval - doesn't display correctly (RTP muxer necessary)
    //string url = "udp://0.0.0.0:2222"; //very fast data retrieval - can't keep up (buffer overflow - guessing it's from sockets?)


frame rate counter / ticker

    const double NANO_TO_SECONDS = 1000000000.0;
    uint64_t currTime, prevTime;
    currTime = armTicksToNs(armGetSystemTick());
    prevTime = currTime;
    uint64_t deltaTime = 0;
    int frameCounter = 180;


original while loop before switching to state enum
    while(appletMainLoop())
    {
        if(streamRequested.load(std::memory_order_acquire))
        {
            //display on the screen a connection is pending
            screen.ClearScreen(pendingStreamCol);

            heading.Render(screen.Renderer(), systemFont);
            
            streamPendingText.Render(screen.Renderer(), systemFont);
            
            screen.PresentScreen();

            if(hostFound)
            {
                RunStartConfiguredStreamCommand(foundIP, hostConnectPort, configRenderer.Settings());
                streamOn = stream.WaitForStream(streamURL);
                streamRequested = false;
                std::cout << "stream connection found? " << streamOn << std::endl;

                if(streamOn)
                {
                    auto streamInfo = stream.StreamInfo();
                    if(streamDecoder != nullptr)
                        delete streamDecoder;

                    streamDecoder = new StreamDecoder(streamInfo->codecpar, false);
                    std::cout << "making gamepad thread" << std::endl;
                    gamepadThread = std::thread(RunGamepadThread, foundIP, gamepadPort);
                }
            }
            else
            {
                std::this_thread::sleep_for(oneSecond);
                streamRequested = false;
            }
        }
        if(streamOn)
        {
            processStream();
        }
        else
        { //no stream, so let's display some helpful info
            screen.ClearScreen(bgCol);
        
            heading.Render(screen.Renderer(), systemFont);
            configRenderer.Render(screen.Renderer(), systemFont);

            controlsText.Render(screen.Renderer(), systemFont);

            if(hostFound.load(std::memory_order_acquire))
            {
                hostConnectionText.value = "Host IP: " + foundIP;
                hostConnectionText.Render(screen.Renderer(), systemFont, heading.colour);
            }
            else
            {
                hostConnectionText.Render(screen.Renderer(), systemFont);
            }

            screen.PresentScreen();

            if(quitApp)
                break;
            // no point thrashing the screen to refresh text
            std::this_thread::sleep_for(thirtyThreeMs);
        }
    }

opening files and config files

    auto constexpr applicationFolder = "sdmc:/switch/switch-remote-play";

    auto constexpr defaultConfigFile =
    "\
    \n\
    found_ip=192.168.0.19;\n\
    desired_framerate=60; comment goes here\n\
    video_resolution=1920x1080; another one here\n\
    video_scale=1280x720;\n\
    bitrate_kb=5120;\n\
    vsync_mode=2;\n\
    \n\
    ";

    void TestFileOperations()
    {
        
        {
            auto filePath = "sdmc:/switch/switch-remote-play/srp-defaultMessage.txt";
            if(saveTextToFile(filePath, defaultControlMessage))
            {
                std::cout << "wrote default control message to file: " << filePath << std::endl;
            }
            else
            {
                std::cout << "Failed to write default control message to file: " << filePath << std::endl;
            }
        }
        {
            std::string txt = std::string{};
            auto filePath = "sdmc:/switch/switch-remote-play/config.ini";
            if(readFileAsText(filePath, txt))
            {
                std::cout << "Opened test txt file: " << filePath << std::endl;
                std::cout << txt << std::endl << std::endl;
            }
            else
            {
                std::cout << "Failed to open test txt file: " << filePath << std::endl;
                if(saveTextToFile(filePath, defaultConfigFile))
                {
                    std::cout << "Saved default config file: " << filePath << std::endl;
                    if(readFileAsText(filePath, txt))
                    {
                        std::cout << "Opened config: " << filePath << std::endl;
                        std::cout << txt << std::endl << std::endl;
                    }
                }
            }
        }
        {
            auto filePath = "sdmc:/";
            auto folder = "switch";
            if(directoryExists(filePath, folder))
            {
                std::cout << "Found " << folder << " in " << filePath << std::endl;

                if(!directoryExists(applicationFolder))
                {
                    std::cout << "    Application folder missing. Creating now." << std::endl;

                    if(createDirectory("sdmc:/switch/", "switch-remote-play"))
                    {
                        std::cout << "        Created missing directory. Checking to make sure it's there." << std::endl;

                        if(directoryExists(applicationFolder))
                            std::cout << "            It's there. All good now." << std::endl;
                        else
                            std::cout << "            It's not there... Failed to make directory properly." << std::endl;
                    }
                    else
                        std::cout << "        Failed to create missing directory." << std::endl;
                }
            }
            else
                std::cout << "Failed to find " << folder << " in " << filePath << std::endl;
        }
        auto appDir = getApplicationDirectory();
        std::cout << "File in App directory: " << appDir << std::endl;
        std::cout << "App directory" << std::endl;
        auto appDirFiles = readApplicationDirectory();
        for(auto& file : appDirFiles)
            std::cout << "    File: " << file << std::endl;

        std::cout << std::endl << "Root directory" << std::endl;
        auto rootDirFiles = readRootDirectory();
        for(auto& file : rootDirFiles)
            std::cout << "    File: " << file << std::endl;
    }

    void TestConfigurationFile()
    {
        std::cout << "Testing Configuration File IO " << std::endl;
        auto config = Configuration();
        std::cout << "    Last Found IP Saved: " << config.FoundIP() << std::endl << std::endl;
        auto savedffmpeg = config.FFMPEGData();
        std::cout << "    Reading FFMPEG Settings: " << std::endl;
        std::cout << "        desired_framerate: " << savedffmpeg.desiredFrameRate << std::endl;
        std::cout << "        video_resolution: " << savedffmpeg.videoX << "x" << savedffmpeg.videoY << std::endl;
        std::cout << "        video_scale: " << savedffmpeg.scaleX<< "x" << savedffmpeg.scaleY << std::endl;
        std::cout << "        bitrate_kb: " << savedffmpeg.bitrateKB << std::endl;
        std::cout << "        vsync_mode: " << savedffmpeg.vsyncMode << std::endl;

        auto fakeIP = "192.168.0.20";
        auto fakeMpegSettings = FFMPEG_Config{
            .desiredFrameRate = 600, .videoX=2160, .videoY = 1440,
            .scaleX = 960, .scaleY = 540, .bitrateKB = 11111, .vsyncMode = 5
        };
        std::cout << "    Saving fake IP to settings: " << fakeIP << std::endl;
        config.SaveFoundIP(fakeIP);
        std::cout << "    Saving fake MPEG settings: " << config.SaveFFMPEG(fakeMpegSettings) << std::endl;
        
        auto config2 = Configuration();
        std::cout << "        IP loaded from config: " << config.FoundIP() << std::endl;
        std::cout << "        IP loaded from config2 (reloading file): " << config2.FoundIP() << std::endl;

        auto savedffmpeg2 = config2.FFMPEGData();
        std::cout << "    Reading FFMPEG Settings: " << std::endl;
        std::cout << "        desired_framerate: " << savedffmpeg2.desiredFrameRate << std::endl;
        std::cout << "        video_resolution: " << savedffmpeg2.videoX << "x" << savedffmpeg2.videoY << std::endl;
        std::cout << "        video_scale: " << savedffmpeg2.scaleX<< "x" << savedffmpeg2.scaleY << std::endl;
        std::cout << "        bitrate_kb: " << savedffmpeg2.bitrateKB << std::endl;
        std::cout << "        vsync_mode: " << savedffmpeg2.vsyncMode << std::endl;
    }



BLOODY AUDIO FORMAT
http://soundfile.sapp.org/doc/WaveFormat/

    The disappointing part is this was much simpler than I thought it was.
    Realising that the framerate can be dynamic and that I needed to WAIT
    for all the samples to come through before attempting to play them...
    So ashamed haha. Thankfully though, it means re-implementation of the audio
    stream code will be a breeze.

    TL;DR if framerate is 30, wait for samplerate/30 samples worth of packets per frame
    if framerate is 100, wait for samplerate/100 samples worth of packets per frame...


Video decoding and rendering
/**
 * Read https://ffmpeg.org/doxygen/3.3/group__lavc__encdec.html for info on the decoding / encoding process for packets
 */
void VideoStream::StreamVideoViaDecoder(ScreenRenderer& renderer, std::atomic_bool& streamOn)
{
    StreamDecoder decoder{stream->codecpar, false};
    if(!decoder.Initialised())
    {
        std::cout << "Error occurred initialising the decoder." << std::endl;
        return;
    }
    
    AVPacket dataPacket;
    av_init_packet(&dataPacket);
    dataPacket.data = NULL;
    dataPacket.size = 0;

    std::cout << "starting stream read of packets...\n" << std::endl;
    //read frames from the stream we've connected to and setup
    while (av_read_frame(streamFormat, &dataPacket) >= 0)
    {
        if(decoder.DecodeFramePacket(dataPacket))
        {
            //something was decoded, render it
            auto screenTexture = renderer.GetScreenTexture();
            auto region = renderer.Region();
            // render frame data - expecting YUV420 format
            // (stride values represent space between horizontal lines across screen)
            auto decodedFrame = decoder.DecodedFrame();

            auto yPlane = decodedFrame.data[0];
            auto yPlaneStride = decodedFrame.width;
            auto uPlane = decodedFrame.data[1];
            auto uPlaneStride = decodedFrame.width/2;
            auto vPlane = decodedFrame.data[2];
            auto vPlaneStride = decodedFrame.width/2;

            // std::cout << "Updating SDL texture" << std::endl;
            SDL_UpdateYUVTexture(screenTexture, &region, 
                                yPlane, yPlaneStride,
                                uPlane, uPlaneStride, 
                                vPlane, vPlaneStride);

            renderer.RenderScreenTexture();
            
            dataPacket.data += decodedFrame.pkt_size; //think this is unnecessary
            dataPacket.size -= decodedFrame.pkt_size; //think this is unnecessary
        }
        
        av_packet_unref(&dataPacket);

        if(!streamOn.load(std::memory_order_acquire))
            break;
    }
    
    avformat_close_input(&streamFormat);
    streamFormat = nullptr;
    decoder.Flush();
    decoder.Cleanup();
}
